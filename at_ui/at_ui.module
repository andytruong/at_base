<?php

require_once dirname(__FILE__) . '/at_ui.codemirror.develphp.inc';
require_once dirname(__FILE__) . '/at_ui.codemirror.attwig.inc';

/**
 * Implements hook_menu_alter().
 */
function at_ui_menu_alter(&$menu) {
  foreach ($menu as &$item) {
    if ($item['page callback'] === 'Drupal\at_base\Route\Controller::pageCallback') {
      $item['page callback'] = 'Drupal\at_ui\Route\Controller::pageCallback';
    }
  }
}

function at_ui_include_code_mirror($extras = array(), $theme = 'monokai') {
  $path = at_library('code.mirror', NULL, FALSE);

  drupal_add_js($path . '/lib/codemirror.js');
  drupal_add_css($path . '/lib/codemirror.css');
  drupal_add_css($path . '/theme/'. $theme .'.css');
  foreach ($extras as $extra) {
    drupal_add_js($path . '/' . $extra);
  }
}

/**
 * Add custom assets to /devel/php form to support php syntax.
 * Include CodeMirror assets.
 *
 * @param  array  $extras
 * @param  string $theme
 */
function at_ui_include_codemirror($extras = array(), $theme = 'monokai') {
  $path = at_library('code.mirror', NULL, FALSE);

  drupal_add_js($path . '/lib/codemirror.js');
  drupal_add_css($path . '/lib/codemirror.css');
  drupal_add_css($path . '/theme/'. $theme .'.css');
  foreach ($extras as $extra) {
    drupal_add_js($path . '/' . $extra);
  }
}

/**
 * @return string.
 */
function at_ui_codemirror_submit_shortcut_hint() {
  return 'Use <code>Ctrl+s</code> or <code>Cmd+s</code> to submit the form.';
}

/**
 * Editing form for editable-route.
 *
 * @todo  Vertical tab-group for route, blocks, …
 * @todo  Case developer edit a template route…
 * @todo  Warning if route configuration file is not editable.
 * @todo  Backup configuration file before saving…
 */
function at_ui_route_form($form, $form_state, $route) {
  at_ui_include_code_mirror(array(
    'mode/yaml/yaml.js',
    'mode/xml/xml.js',
    'mode/css/css.js',
    'mode/htmlmixed/htmlmixed.js',
  ));

  drupal_add_js(drupal_get_path('module', 'at_ui') . '/misc/js/route.edit.js');
  drupal_add_css(drupal_get_path('module', 'at_ui') . '/misc/css/cm.css');

  $parts = array(
    'content' => 'Content',
    'blocks' => 'Blocks',
    'attached' => 'Attached',
    'cache' => 'Cache',
  );

  foreach ($parts as $k => $v) {
    if (isset($route[$k])) {
      $$k = $route[$k];
      unset($route[$k]);
    }
  }

  $form['route'] = array(
    '#type' => 'textarea',
    '#title' => 'Route',
    '#required' => TRUE,
    '#resizable' => FALSE,
    '#default_value' => yaml_emit($route),
  );

  if (isset($content)) {
    $form['#prefix']  = '<div id="editable-route-preview">';
    $form['#prefix'] .= ' ' . $content;
    $form['#prefix'] .= '</div>';

    drupal_add_js(drupal_get_path('module', 'at_ui') . '/misc/js/route.edit.live.js');
    drupal_add_css(drupal_get_path('module', 'at_ui') . '/misc/css/route.edit.live.css');

    $form['content'] = array(
      '#type' => 'textarea',
      '#title' => 'Content',
      '#required' => TRUE,
      '#resizable' => FALSE,
      '#default_value' => at_container('twig_string')->render($content),
    );
    unset($content);
  }

  foreach ($parts as $k => $label) {
    if (isset($$k)) {
      $form[$k] = array(
        '#type' => 'textarea',
        '#title' => $label,
        '#required' => TRUE,
        '#resizable' => FALSE,
        '#default_value' => yaml_emit($$k),
      );
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}
