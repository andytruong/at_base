<?php

class At_Base_Id_TestCase extends DrupalWebTestCase {
  public function setUp() {
    parent::setUp('atest_base');
  }

  public function getInfo() {
    return array(
      'name' => 'AT Base: at_id()',
      'description' => 'Make sure at_id() function is working correctly.',
      'group' => 'AT Base',
    );
  }

  public function testAtId() {
    $expected = 'Hello Andy Truong';
    $actual = at_id(new At_Base_Test_Class())->hello('Andy Truong');
    $this->assertEqual($expected, $actual);
  }
}

/**
 * at_modules() use cache.
 */
class At_Base_Modules_TestCase extends DrupalWebTestCase {
  public function getInfo() {
    return array(
      'name' => 'AT Base: at_modules()',
      'description' => 'Make sure at_id() function is working correctly.',
      'group' => 'AT Base',
    );
  }

  public function setUp() {
    parent::setUp('atest_base', 'atest2_base');
  }

  public function testAtModules() {
    $this->assertTrue(in_array('atest_base', at_modules()));
  }

  public function testAtestModules() {
    $this->assertTrue(in_array('atest2_base', at_modules('atest_base')));
  }
}

class At_Base_Contant_Parser_TestCase extends DrupalWebTestCase {
  public function getInfo() {
    return array(
      'name' => 'AT Base: Constant Parser',
      'description' => 'Make sure Constant Parser class is working correctly.',
      'group' => 'AT Base',
    );
  }

  public function setUp() {
    parent::setUp('atest_base');
  }

  public function testAtConstantParser() {
    $exp      = 'DRUPAL_ANONYMOUS_RID';
    $expected = 1;
    $actual   = at_id(new \Drupal\at_base\Helper\ConstantParser($exp))->parse();
    $this->assertEqual($expected, $actual);

    $exp      = 'DRUPAL_AUTHENTICATED_RID';
    $expected = 2;
    $actual   = at_id(new \Drupal\at_base\Helper\ConstantParser($exp))->parse();
    $this->assertEqual($expected, $actual);

    $exp      = 'DRUPAL_ANONYMOUS_RID | DRUPAL_AUTHENTICATED_RID';
    $expected = 3;
    $actual   = at_id(new \Drupal\at_base\Helper\ConstantParser($exp))->parse();
    $this->assertEqual($expected, $actual);

    $exp      = 'DRUPAL_ANONYMOUS_RID & DRUPAL_AUTHENTICATED_RID';
    $expected = 0;
    $actual   = at_id(new \Drupal\at_base\Helper\ConstantParser($exp))->parse();
    $this->assertEqual($expected, $actual);
  }
}

class At_Base_Helper_RealPath_TestCase extends DrupalWebTestCase {
  public function getInfo() {
    return array(
      'name' => 'AT Base: Helpers > RealPath',
      'description' => 'Make sure Helper classes are working correctly.',
      'group' => 'AT Base',
    );
  }

  public function setUp() {
    parent::setUp('atest_base');
  }

  public function testRealPath() {
    $expected = path_to_theme() . '/templates/page.home.html.twig';
    $actual = at_id(new \Drupal\at_base\Helper\RealPath('%theme/templates/page.home.html.twig'))->get();
    $this->assertEqual($expected, $actual);
  }
}

class At_Base_Helper_RenderContent_TestCase extends DrupalWebTestCase {
  public function getInfo() {
    return array(
      'name' => 'AT Base: Helpers > RenderContent',
      'description' => 'Make sure Helper classes are working correctly.',
      'group' => 'AT Base',
    );
  }

  public function setUp() {
    parent::setUp('atest_theming');
  }

  public function testRenderContent() {
    // Simple string
    $expected = 'Hello Andy Truong';
    $actual = at_id(new \Drupal\at_base\Helper\RenderContent($expected))->render();
    $this->assertEqual($expected, $actual);

    // Template string
    $data['template_string'] = 'Hello {{ name }}';
    $data['variables']['name'] = 'Andy Truong';
    $output = at_id(new \Drupal\at_base\Helper\RenderContent($data))->render();
    $output = $output['#markup'];
    $this->assertEqual($expected, $actual);

    // Template
    $data['template'] = '@atest_theming/templates/hello.twig';
    $data['variables']['name'] = 'Andy Truong';
    $output = at_id(new \Drupal\at_base\Helper\RenderContent($data))->render();
    $output = $output['#markup'];
    $assert = strpos($output, $actual) !== FALSE;
    $this->assertTrue($assert, "Found <strong>{$expected}</strong> in result.");
  }
}
