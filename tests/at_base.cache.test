<?php

/**
 * cache_get()/cache_set() does not work on unit test cases.
 */
class At_Base_Cache_TestCase extends DrupalWebTestCase {
  public function getInfo() {
    return array(
      'name' => 'AT Base: Cache',
      'description' => 'Make sure the at_cache() is working correctly.',
      'group' => 'AT Base'
    );
  }

  public function setUp() {
    parent::setUp('atest_base');
  }

  public function testClosure() {
    $options = array(
      'cache_id' => 'at_test:time:' . __FUNCTION__,
      'ttl' => '+ 15 minutes',
      'bin' => 'cache',
      'reset' => TRUE,
    );

    // Init the value
    $time_1 = at_cache($options, function () {
      return time();
    });
    sleep(2);

    // Call at_cache() again
    $time_2 = at_cache(array('reset' => FALSE) + $options, function () {
      return time();
    });

    // The value should be same — it's cached.
    $this->assertEqual($time_1, $time_2);
  }

  public function testStringCallback() {
    $options = array(
      'cache_id' => 'at_test:time:' . __FUNCTION__,
      'ttl' => '+ 15 minutes',
      'bin' => 'cache',
      'reset' => TRUE,
    );

    // Init the value
    $time_1 = at_cache($options, 'time');
    sleep(2);

    // Call at_cache() again
    $time_2 = at_cache(array('reset' => FALSE) + $options, 'time');

    // The value should be same — it's cached.
    $this->assertEqual($time_1, $time_2);
  }

  public function testStringCallbackWithArguments() {
    $options = array(
      'cache_id' => 'at_test:string:' . __FUNCTION__,
      'ttl' => '+ 15 minutes',
      'bin' => 'cache',
      'reset' => TRUE,
    );

    // Init the value
    $string_1 = at_cache($options, 'sprintf', array('Timestamp: %d', time()));
    sleep(2);

    // Call at_cache() again
    $string_2 = at_cache(array('reset' => FALSE) + $options, 'sprintf', array('Timestamp: %d', time()));

    // The value should be same — it's cached.
    $this->assertEqual($string_1, $string_2);
  }

  public function testObjectCallback() {
    $options = array(
      'cache_id' => 'at_test:time:' . __FUNCTION__,
      'ttl' => '+ 15 minutes',
      'bin' => 'cache',
      'reset' => TRUE,
    );

    // Init the value
    $time_1 = at_cache($options, 'At_Base_Cache_TestCase::time');
    sleep(2);

    // Call at_cache() again
    $time_2 = at_cache(array('reset' => FALSE) + $options, 'At_Base_Cache_TestCase::time');

    // The value should be same — it's cached.
    $this->assertEqual($time_1, $time_2);
  }

  public function testAllowEmpty() {
    $options = array(
      'cache_id' => 'at_test:time:' . __FUNCTION__,
      'ttl' => '+ 15 minutes',
      'bin' => 'cache',
      'reset' => TRUE,
      'allow_empty' => FALSE,
    );

    // Init the value
    $time_1 = at_cache($options, 'At_Base_Cache_TestCase::time');
    sleep(2);

    // Change cached-data to empty string
    cache_set(
      $options['cache_id'],
      '',
      $options['bin'],
      strtotime($options['ttl']));

    // Call at_cache() again
    $time_2 = at_cache(array('reset' => FALSE) + $options, 'At_Base_Cache_TestCase::time');

    // The value should not be same
    $this->assertNotEqual($time_1, $time_2);
  }

  public function testAPCStorage() {
    if (!function_exists('apc_fetch')) return;

    $o = array(
      'cache_id' => 'at_test:time:' . __FUNCTION__,
      'ttl' => '+ 15 minutes',
      'bin' => 'cache',
      'apc' => TRUE,
      'reset' => FALSE,
    );

    $time_0 = time();
    $time_1 = at_cache($o, function () use ($time_0) { return $time_0; });
    $time_2 = apc_fetch("{$o['bin']}.{$o['cache_id']}");

    $this->assertEqual($time_0, $time_1);
    $this->assertEqual($time_1, $time_2);
  }

  /**
   * Helper method for testObjectCallback().
   * @return int
   */
  public static function time() {
    return time();
  }
}

class At_Base_Cache_Tag_TestCase extends DrupalWebTestCase {
  public function getInfo() {
    return array(
      'name' => 'AT Base: Cache Tags',
      'description' => 'Make sure the at_cache() is working correctly.',
      'group' => 'AT Base'
    );
  }

  public function setUp() {
    parent::setUp('atest_base');
  }

  public function testCacheTag() {
    $o['id'] = 'atest_base:cache:tag:1';
    $o['tags'] = array('at_base', 'atest');

    $data_1 = at_cache($o, function(){ return 'Data #1'; });
    $data_2 = at_cache($o, function(){ return 'This is not called'; });

    // Delete items tagged with 'atest'
    at_cache_flush_by_tags($o['tags']);

    $data_3 = at_cache($o, function(){ return 'Data #3 — must be called.'; });

    $this->assertNotEqual($data_1, $data_3);
  }
}
