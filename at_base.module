<?php

/**
 * @file at_base.module
 *
 * Include custom functions.
 *
 * @todo  Next release:
 *
 *  - Remove at_fn(), at_fn_fake()
 *  - Update docs for service container > reuse option.
 */
use Drupal\at_base\Cache;
use Drupal\at_base\Config\Config;
use Drupal\at_base\Helper\ModuleFetcher;

require_once dirname(__FILE__) . '/includes/at_base.hooks.php';
require_once dirname(__FILE__) . '/includes/at_base.missing.php';
require_once dirname(__FILE__) . '/includes/at_base.hack.php';

define('AT_CLASS', 'Drupal\at_base\AT');

/**
 * Wrapper to helper classes.
 *
 * @return \Drupal\at_base\AT
 */
function at($class_name = 'Drupal\at_base\AT')
{
    if (!$obj = &drupal_static(__FUNCTION__)) {
        $obj = new $class_name;
    }
    return $obj;
}

/**
 * Can not:
 *    new Thing()->doStuff();
 *
 * Can:
 *    at_id(new Thing())->doStuff();
 *
 * @return self
 */
function at_id($x)
{
    return $x;
}

/**
 * Invokes the "new" operator with a vector of arguments. There is no way to
 * call_user_func_array() on a class constructor, so you can instead use this
 * function:
 *
 * $obj = at_newv($class_name, $argv);
 *
 * That is, these two statements are equivalent:
 *
 * $pancake = new Pancake('Blueberry', 'Maple Syrup', true);
 * $pancake = newv('Pancake', array('Blueberry', 'Maple Syrup', true));
 *
 * @param  string  The name of a class.
 * @param  list    Array of arguments to pass to its constructor.
 * @return obj     A new object of the specified class, constructed by passing
 *                  the argument vector to its constructor.
 */
function at_newv($class_name, $argv = array())
{
    $reflector = new ReflectionClass($class_name);
    if ($argv) {
        return $reflector->newInstanceArgs($argv);
    }
    return $reflector->newInstance();
}

/**
 * Care about site caching.
 *
 * @param  array|string $options
 * @param  Closure|string $callback
 * @param  array  $arguments
 * @return mixed
 * @see    at_cache_flush_by_tag()
 * @see    https://github.com/andytruong/at_base/wiki/7.x-2.x-cache-warming
 * @see    https://github.com/andytruong/at_base/wiki/7.x-2.x-Function:-at_cache
 */
function at_cache($options, $callback = NULL, $arguments = array())
{
    // User prefer string as cache options
    // Style: $id OR $id,$ttl OR $id,~,$bin OR $id,~,~ OR $id,$ttl,$bin
    if (is_string($options)) {
        @list($id, $ttl, $bin) = explode(',', $options);

        $options = array(
            'id'  => $id,
            'ttl' => is_null($ttl) ? NULL : ('~' === $ttl ? NULL : $ttl),
            'bin' => is_null($bin) ? NULL : ('~' === $bin ? NULL : $bin),
        );
    }

    if (isset($options['cache_id'])) {
        $options['id'] = $options['cache_id'];
        unset($options['cache_id']);
    }

    foreach (array('callback', 'options') as $k) {
        if (!empty($kk) && isset($options[$k])) {
            $kk = $options[$k];
        }
    }

    return at_id(new Cache($options, $callback, $arguments))->get();
}

/**
 * Delete cached data by tags.
 *
 * @see at_cache()
 * @param  array  $tags
 */
function at_cache_flush_by_tags($tags = array())
{
    at_container('cache.tag_flusher')->flush($tags);
}

/**
 * Usage
 *
 * // Lookup at /path/to/my_module/config/config.yml > webmaster
 * $webmaster_email = at_config('my_module')->get('webmaster');
 *
 * // Lookup at /path/to/my_module/config/templates.yml > email.notify
 * $mail_notify_template = at_config('my_module', 'templates')->get('email.notify');
 *
 * @param  string  $module    Module name
 * @param  string  $id        Config ID
 * @param  boolean $refresh   Build new cache
 * @return Config
 */
function at_config($module, $id = 'config', $refresh = FALSE)
{
    return at_container('config')->setModule($module)->setId($id);
}

/**
 * Get modules that depends on a specific module.
 * @param string $base_module
 * @param string $config_file
 * @return array
 * @see system_list()
 */
function at_modules($base_module = 'at_base', $config_file = '')
{
    $o['ttl'] = '+ 1 year';
    $o['bin'] = 'cache_bootstrap';
    $o['id'] = "atmodules:{$base_module}:{$config_file}";

    return at_cache($o, function() use ($base_module, $config_file) {
        return at()
                ->getHelper()
                ->getModuleFetcher($base_module, $config_file)
                ->fetch(system_list('module_enabled'));
    });
}

/**
 * Shortcut to render to icon.
 */
function at_icon($name, $source = 'icon.fontawesome')
{
    try {
        return at_container($source)->get($name)->render();
    }
    catch (Exception $e) {
        return $e->getMessage();
    }
}

/**
 * Generate path for library.
 *
 * @param  string $name
 * @param  string $version
 * @return string
 */
function at_library($name, $version = 'default', $include_drupal_root = TRUE)
{
    $paths = array(conf_path(), 'sites/all');
    foreach ($paths as $path) {
        $return = DRUPAL_ROOT . "/{$path}/libraries/{$name}";
        if ('default' !== $version) {
            $return .= "/{$version}";
        }

        if (FALSE !== @fileowner($return)) {
            return $include_drupal_root ? rtrim($return, '/') : substr($return, strlen(DRUPAL_ROOT) + 1);
        }
    }

    $msg = "Missing library: {$name} (version {$version})";
    if (at_debug()) {
        $msg .= ' You can run `drush atr` to install missing dependencies.';
    }

    throw new RuntimeException($msg);
}
