<?php

require_once dirname(__FILE__) . '/includes/at_base.api.php';
require_once dirname(__FILE__) . '/includes/at_base.hooks.php';
require_once dirname(__FILE__) . '/includes/at_base.missing.php';
require_once dirname(__FILE__) . '/includes/at_base.hack.php';

define('AT_CLASS', 'Drupal\at_base\AT');

/**
 * Wrapper to helper classes.
 *
 * @return \Drupal\at_base\AT
 */
function at($class_name = 'Drupal\at_base\AT')
{
    if (!$obj = &drupal_static(__FUNCTION__)) {
        $obj = new $class_name;
    }
    return $obj;
}

/**
 * Can not:
 *    new Thing()->doStuff();
 *
 * Can:
 *    at_id(new Thing())->doStuff();
 *
 * @return self
 */
function at_id($x)
{
    return $x;
}

/**
 * Invokes the "new" operator with a vector of arguments. There is no way to
 * call_user_func_array() on a class constructor, so you can instead use this
 * function:
 *
 * $obj = at_newv($class_name, $argv);
 *
 * That is, these two statements are equivalent:
 *
 * $pancake = new Pancake('Blueberry', 'Maple Syrup', true);
 * $pancake = newv('Pancake', array('Blueberry', 'Maple Syrup', true));
 *
 * @param  string  The name of a class.
 * @param  list    Array of arguments to pass to its constructor.
 * @return obj     A new object of the specified class, constructed by passing
 *                  the argument vector to its constructor.
 */
function at_newv($class_name, $argv = array())
{
    $reflector = new ReflectionClass($class_name);
    if ($argv) {
        return $reflector->newInstanceArgs($argv);
    }
    return $reflector->newInstance();
}

/**
 * Get modules that depends on a specific module.
 *
 * @param string $base_module
 * @param string $config_file
 * @return array
 * @see system_list()
 */
function at_modules($base_module = 'at_base', $config_file = '', $modules = array())
{
    static $cache = array();

    if (!isset($cache[$base_module][$config_file])) {
        if (!empty($modules)) {
            $cache[$base_module][$config_file] = $modules;
        }
        else {
            $cache[$base_module][$config_file] = at()
                ->getHelper()
                ->getModuleFetcher($base_module, $config_file)
                ->fetch(system_list('module_enabled'));
        }
    }

    return $cache[$base_module][$config_file];
}

/**
 * Generate path for library.
 *
 * @param  string $name
 * @param  string $version
 * @return string
 */
function at_library($name, $version = 'default', $include_drupal_root = TRUE)
{
    $paths = array(conf_path(), 'sites/all');
    foreach ($paths as $path) {
        $return = DRUPAL_ROOT . "/{$path}/libraries/{$name}";
        if ('default' !== $version) {
            $return .= "/{$version}";
        }

        if (FALSE !== @fileowner($return)) {
            return $include_drupal_root ? rtrim($return, '/') : substr($return, strlen(DRUPAL_ROOT) + 1);
        }
    }

    $msg = "Missing library: {$name} (version {$version})";
    if (at_debug()) {
        $msg .= ' You can run `drush atr` to install missing dependencies.';
    }

    throw new RuntimeException($msg);
}
