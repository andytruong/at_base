<?php

/**
 * @file at_base.module
 *
 * Include custom functions.
 *
 * @todo  Next release:
 *
 *  - Remove at_fn(), at_fn_fake()
 *  - Update docs for service container > reuse option.
 */
use Drupal\at_base\Cache;
use Drupal\at_base\Config\Config;
use Drupal\at_base\Container;
use Drupal\at_base\Helper\ModulesFetcher;

require_once dirname(__FILE__) . '/lib/AT.php';
require_once dirname(__FILE__) . '/lib/Autoloader.php';
require_once dirname(__FILE__) . '/at_base.hooks.inc';
require_once dirname(__FILE__) . '/at_base.missing.inc';
require_once dirname(__FILE__) . '/at_base.hack.inc';

/**
 * Can not:
 *    new Thing()->doStuff();
 *
 * Can:
 *    at_id(new Thing())->doStuff();
 *
 * @return static
 */
function at_id($x)
{
    return $x;
}

/**
 * Invokes the "new" operator with a vector of arguments. There is no way to
 * call_user_func_array() on a class constructor, so you can instead use this
 * function:
 *
 * $obj = at_newv($class_name, $argv);
 *
 * That is, these two statements are equivalent:
 *
 * $pancake = new Pancake('Blueberry', 'Maple Syrup', true);
 * $pancake = newv('Pancake', array('Blueberry', 'Maple Syrup', true));
 *
 * @param  string  The name of a class.
 * @param  list    Array of arguments to pass to its constructor.
 * @return obj     A new object of the specified class, constructed by passing
 *                  the argument vector to its constructor.
 */
function at_newv($class_name, $argv = array())
{
    $reflector = new ReflectionClass($class_name);
    if ($argv) {
        return $reflector->newInstanceArgs($argv);
    }
    return $reflector->newInstance();
}

/**
 * Service container.
 *
 * @staticvar \Drupal\at_base\Container $container
 * @param string $id
 * @return mixed
 *
 * @see https://github.com/andytruong/at_base/wiki/7.x-2.x-service-container
 */
function at_container($id = 'container')
{
    static $container = NULL;

    if (!$container) {
        $container = new Container();
    }

    $args = func_get_args();
    if (1 !== count($args)) {
        array_shift($args);
        $container["{$id}:arguments"] = $args;
    }

    return $container[$id];
}

/**
 * Wrapper for Key-Value services.
 *
 * @param  string $bin
 * @param  array  $options
 */
function at_kv($bin, $options = array(), $engine_name = 'array')
{
    global $at;

    if (isset($at['kv'][$bin]['engine'])) {
        $engine_name = $at['kv'][$bin]['engine'];
    }

    $engine = at_container("kv.engine.{$engine_name}");
    $engine->setOptions($options);

    return $engine;
}

/**
 * Make function easier to be replaced by an other one.
 *
 * For example:
 *
 *  // Override entity_bundle function
 *  $GLOBALS['conf']['atfn:entity_bundle'] = function($type, $entity) { return $entity->type; };
 *
 *  Call replacable entity_bundle function:
 *    at_fn('entity_bundle', 'node', $node);
 *
 *  @see  at_fn_fake()
 *  @todo Use at_fn class, remove in next release.
 */
function at_fn()
{
    $args = func_get_args();
    $fn = array_shift($args);
    return call_user_func_array(variable_get("atfn:{$fn}", $fn), $args);
}

/**
 * Similar to at_fn(). Usage:
 *
 *  \at_fn::entity_bundle('node', $node);
 */
class at_fn
{

    public static function __callStatic($fn, $args)
    {
        return call_user_func_array(variable_get("atfn:{$fn}", $fn), $args);
    }

}

/**
 * Care about site caching.
 *
 * @param  array|string $options
 * @param  Closure|string $callback
 * @param  array  $arguments
 * @return mixed
 * @see    at_cache_flush_by_tag()
 * @see    https://github.com/andytruong/at_base/wiki/7.x-2.x-cache-warming
 * @see    https://github.com/andytruong/at_base/wiki/7.x-2.x-Function:-at_cache
 */
function at_cache($options, $callback = NULL, $arguments = array())
{
    // User prefer string as cache options
    // Style: $id OR $id,$ttl OR $id,~,$bin OR $id,~,~ OR $id,$ttl,$bin
    if (is_string($options)) {
        @list($id, $ttl, $bin) = explode(',', $options);

        $options = array(
            'id'  => $id,
            'ttl' => is_null($ttl) ? NULL : ('~' === $ttl ? NULL : $ttl),
            'bin' => is_null($bin) ? NULL : ('~' === $bin ? NULL : $bin),
        );
    }

    if (isset($options['cache_id'])) {
        $options['id'] = $options['cache_id'];
        unset($options['cache_id']);
    }

    foreach (array('callback', 'options') as $k) {
        if (!empty($kk) && isset($options[$k])) {
            $kk = $options[$k];
        }
    }

    return at_id(new Cache($options, $callback, $arguments))->get();
}

/**
 * Delete cached data by tags.
 *
 * @see at_cache()
 * @param  array  $tags
 */
function at_cache_flush_by_tags($tags = array())
{
    at_container('cache.tag_flusher')->flush($tags);
}

/**
 * Usage
 *
 * // Lookup at /path/to/my_module/config/config.yml > webmaster
 * $webmaster_email = at_config('my_module')->get('webmaster');
 *
 * // Lookup at /path/to/my_module/config/templates.yml > email.notify
 * $mail_notify_template = at_config('my_module', 'templates')->get('email.notify');
 *
 * @param  string  $module    Module name
 * @param  string  $id        Config ID
 * @param  boolean $refresh   Build new cache
 * @return Config
 */
function at_config($module, $id = 'config', $refresh = FALSE)
{
    return at_container('config')->setModule($module)->setId($id);
}

/**
 * Get modules that depends on a specific module.
 * @param string $base_module
 * @param string $config_file
 * @return array
 * @see system_list()
 */
function at_modules($base_module = 'at_base', $config_file = '')
{
    $o['ttl'] = '+ 1 year';
    $o['bin'] = 'cache_bootstrap';
    $o['id'] = "atmodules:{$base_module}:{$config_file}";

    return at_cache($o, function() use ($base_module, $config_file) {
        $module_enabled = system_list('module_enabled');
        return at_id(new ModulesFetcher($base_module, $config_file))
                ->fetch($module_enabled);
    });
}

/**
 * Shortcut to render to icon.
 */
function at_icon($name, $source = 'icon.fontawesome')
{
    try {
        return at_container($source)->get($name)->render();
    }
    catch (Exception $e) {
        return $e->getMessage();
    }
}

/**
 * Generate path for library.
 *
 * @param  string $name
 * @param  string $version
 * @return string
 */
function at_library($name, $version = 'default', $include_drupal_root = TRUE)
{
    $paths = array(conf_path(), 'sites/all');
    foreach ($paths as $path) {
        $return = DRUPAL_ROOT . "/{$path}/libraries/{$name}";
        if ('default' !== $version) {
            $return .= "/{$version}";
        }

        if (FALSE !== @fileowner($return)) {
            return $include_drupal_root ? rtrim($return, '/') : substr($return, strlen(DRUPAL_ROOT) + 1);
        }
    }

    $msg = "Missing library: {$name} (version {$version})";
    if (at_debug()) {
        $msg .= ' You can run `drush atr` to install missing dependencies.';
    }

    throw new \RuntimeException($msg);
}

/**
 * This is wrapper for typped-data, an API to make sure data provided is matched
 * to its schema.
 *
 * Example:
 *
 *   $schema = array('type' => 'constant');
 *   $input = 'MENU_LOCAL_TASK';
 *   $data = at_data($schema, $input);
 *   // Validate
 *   echo $data->validate($error) ? $data->getValue() : $error;
 *
 * @see https://github.com/atdrupal/at_base/wiki/7.x-2.x-typed-data
 */
function at_data($def, $value = NULL)
{
    if (!is_array($def)) {
        throw new Exception('Definition must be an array.');
    }

    if (!isset($def['type'])) {
        throw new Exception('Missing type key');
    }

    $service = strpos($def['type'], 'type.') === 0 ? $def['type'] : ('type.' . $def['type']);

    // Special type: list<element_type>
    if (strpos($service, 'type.list<') === 0) {
        $def['element_type'] = substr($service, 10, -1);
        $service = 'type.list';
    }

    return at_container($service)
            ->setDef($def)
            ->setValue($value)
    ;
}
